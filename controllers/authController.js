const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const User = require('../models/User');

//register User
const register = async (req, res) => {
    try {
        const { email, password, role, fullName } = req.body;
        const userExists = await User.findOne({ email });
        if (userExists) return res.status(400).json({ message: 'User already exists'});

        const newUser = new User({ email, password, role, fullName});
        await newUser.save(); // save the new user using the .save() from the User schema
        res.status(201).json({ message: 'User registered successfully' });
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
};

//login User and return JWT
const login = async (req, res) => {
    try {
        const { email, password } = req.body;
        const user = await User.findOne({ email });

        if (!user) return res.status(400).json({ message: 'Invalid credentials '});

        const token = jwt.sign({ userId: user._id },
            process.env.JWT_SECRET, { expiresIn: '1h' }
        ); //create token using user_id (generated by mongoDB) and the secret
        res.json({ token }); //return the token to the client
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
};

//get User profile (protected, check authRoutes/authMiddleware)
const getUserProfile = async (req, res) => {
    try {
        const user = await User.findById(req.userId); //gets userId from authMiddleware (decoded)
        res.json(user);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
};

const saveJobForUser = async (req, res) => {
    try {
        const { jobId } = req.body; // Only need the jobId from the request body
        const user = await User.findById(req.userId); // Use req.userId from the middleware

        if (!user) {
            return res.status(404).json({ message: 'User not found' });
        }

        if (!user.savedJobs.includes(jobId)) {
            user.savedJobs.push(jobId);
            await user.save();
            res.status(201).json({ message: 'Job saved successfully' });
        } else {
            res.status(400).json({ message: 'Job already saved' });
        }
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
};

const getUserSavedJobs = async (req, res) => {
    try {
        const user = await User.findById(req.userId).populate('savedJobs'); // Use req.userId
        if (!user) {
            return res.status(404).json({ message: 'User not found' });
        }
        res.json(user.savedJobs);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
};

const updateUserInfo = async (req, res) => {
    try {
        const { fullName, location, bio } = req.body; // Get the new name from the request body
        if (!fullName) {
            return res.status(400).json({ message: 'Name is required' });
        }

        const user = await User.findById(req.userId); // Get user by ID from middleware
        if (!user) {
            return res.status(404).json({ message: 'User not found' });
        }

        user.fullName = fullName; // Update the name
        user.location = location;
        user.bio = bio;
        await user.save(); // Save changes to the database

        res.status(200).json({ message: 'Name updated successfully', name: user.name, location: user.location, bio: user.bio });
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
};


module.exports = { 
    register,
    login, 
    getUserProfile, 
    saveJobForUser, 
    getUserSavedJobs,
    updateUserInfo
};
